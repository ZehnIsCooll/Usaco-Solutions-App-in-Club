#include <iostream>
#include <fstream>
#include <vector>
using namespace std;
 
int possible_answers[2000];
 
void friday(int b1milk, vector<int> B1, vector<int> B2)
{
  for (int i=0; i<B2.size(); i++) {
    int x = B2[i];
    possible_answers[b1milk + x] = 1; // record this value as possible
  }
}
 
void thursday(int b1milk, vector<int> B1, vector<int> B2)
{
  for (int i=0; i<B1.size(); i++) {
    int x = B1[i];
    vector<int> new_B2 = B2; new_B2.push_back(x);
    vector<int> new_B1 = B1; new_B1.erase(new_B1.begin() + i);
    friday(b1milk - x, new_B1, new_B2);
  }
}
 
void wednesday(int b1milk, vector<int> B1, vector<int> B2)
{
  for (int i=0; i<B2.size(); i++) {
    int x = B2[i];
    vector<int> new_B1 = B1; new_B1.push_back(x);
    vector<int> new_B2 = B2; new_B2.erase(new_B2.begin() + i);
    thursday(b1milk + x, new_B1, new_B2);
  }
}
void tuesday(int b1milk, vector<int> B1, vector<int> B2)
{
  for (int i=0; i<B1.size(); i++) {
    int x = B1[i];
    vector<int> new_B2 = B2; new_B2.push_back(x);
    vector<int> new_B1 = B1; new_B1.erase(new_B1.begin() + i);
    wednesday(b1milk - x, new_B1, new_B2);
  }
}
 
int main(void)
{
  int n, answer = 0;
  vector<int> B1, B2;
  ifstream fin ("backforth.in");
  for (int i=0; i<10; i++) { fin >> n; B1.push_back(n); }
  for (int i=0; i<10; i++) { fin >> n; B2.push_back(n); }
 
  tuesday(1000, B1, B2);
  
  ofstream fout ("backforth.out");
  for (int i=0; i<2000; i++) 
    answer += possible_answers[i];
  fout << answer << "\n";
  return 0;
}

#On Monday, FJ can choose from 10 different buckets.
On Tuesday, he will be able to choose from 11 ( no matter which bucket he brings);
on Wednesday, Thursday, and Friday, he will also have 11 choices. Thus, a rough upper
bound for the number of different things Farmer John can do is 10 * 11^4 = 14610 operations,
which means we can just simulate them. (A good rule of thumb is that if the number is under 
20,000,000, it will probably run in time. This is “far” below that number!) To do this, we 
can keep two arrays “B1” and “B2” representing the buckets in barns B1 and B2, respectively. 
We first call a function called “tuesday” which tries all possible values in B1, then passes 
the new values of B1 and B2 to a function called “wednesday”. We repeat with functions “wednesday”,
“thursday”, and “friday”, keeping track of the milk at the first barn. Since the possible ending values 
of milk are all between 0 and 2,000 ( a very conservative estimate), we can keep an array of size 2,000
and flip its values from false to true spending on whether we can. At the end, we count all the “true” 
values of the array to get our final answer.
